------------------------------------------------
-----------pthread_create loop------------------
------------------------------------------------

pthread_mutex_t mutex;

void *routine (void* arg)
{
    pthread_mutex_lock(&mutex);
    printf("...");
    pthread_mutex_unlock(&mutex);

}

int main(int argc, char **argv)
{
    pthread_t th[4];

    pthread_mutex_init(&mutex, NULL);
    for(i = 0; i < 4, i++)
    {
        if(pthread_create(t1 + i, NULL, &routine, NULL) != 0)
        {
            perror("Failed to create thread");
            return (1);
        }
    }
    for(i = 0; i < 4, i++)
    {
        if(pthread_join(t1[i], NULL) != 0)
        {
            return (2); 
        }
    }
    pthread_mutex_destroy(&mutex);
    return (0);
}
------------------------------------------------
------------------return value------------------
------------------------------------------------     
        
->> retornar um valor na rotine do pthread_create <<-

pthread_mutex_t mutex;

void *roll_dice (void* arg)
{
    int value = (rand() % 6) = 1;
    int *result = malloc(sizeof(int));
    int *result = value;
    return ((void *) result);
}

int main(int argc, char **argv)
{
    int *res;
    pthread_t th;

    pthread_mutex_init(&mutex, NULL);
    if(pthread_create(t1 + i, NULL, &roll_dice, NULL) != 0)
        return (1);
    if(pthread_join(t1[i], (void** &res)) != 0)
        return (2); 
    pthread_mutex_destroy(&mutex);
    printf("res= %d", *res);
    free(res);
    return (0);
}