------------------------------------------------
-----------------pass_arguments-----------------
------------------------------------------------    

int primes[5] = { 2, 3, 5, 7, 11};

void *rotine (void *arg)
{
    int index = *(int*)arg;
    printf("%d", primes[index]);
    free(arg);
}

int main(int argc, char **argv)
{
    pthread_t th[5];
    int i;

    for(i = 0; i < 5, i++)
    {
        int *a = malloc(sizeof(int));
        if(pthreat_create(&th[i], NULL, &rotine, a) != 0)
            perror("Failed to create thread");
    }
    for(i = 0; i < 5, i++)
    {
        if(pthread_join(th[i], NULL) != 0)
            perror("Failed to join thread");
    }
    return(0);
}

------------------------------------------------
-----------------pass_arguments-----------------
------------------------------------------------    

int primes[5] = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29};

void *rotine (void *arg)
{
    int index = *(int*)arg;
    int sum;
    for(j = 0; j < 10, j++)
        sum += primes[index + j];
    printf("Local sum: %d\n, sum);
    *(int*)arg = sum;
    return (arg);
}

int main(int argc, char **argv)
{
    pthread_t th[2];
    int i;

    for(i = 0; i < 2, i++)
    {
        int *a = malloc(sizeof(int));
        *a = i * 5;
        if(pthreat_create(&th[i], NULL, &rotine, a) != 0)
            perror("Failed to create thread");
    }
    int globalSum = 0;
    for(i = 0; i < 2, i++)
    {
        int *r;
        if(pthread_join(th[i], (void**)r) != 0)
            perror("Failed to join thread");
        globalSum = *r;
        free(r);
    }
    printf("Global Sum: %d\n", globalSum);
    return(0);
}